generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id                    String          @id @db.VarChar(32)
  name                  String          @db.VarChar(100)
  companyName           String          @map("company_name") @db.VarChar(100)
  createdAt             DateTime        @default(now()) @db.DateTime(0)
  addTransactionCharges Boolean         @map("add_tc")
  updatedAt             DateTime        @updatedAt @db.DateTime(0)
  payMethod             PayMethod       @map("pay_method")
  currency              Currency
  salesRepId            Int             @map("sales_rep_id")
  salesRep              SalesRep        @relation(fields: [salesRepId], references: [id])
  status                ClientStatus
  emails                ClientEmail[]
  addresses             ClientAddress[]
  phones                ClientPhone[]
  orders                PurchaseOrder[]

  @@map("clients")
}

model Vendor {
  id         Int          @id @default(autoincrement())
  updatedAt  DateTime     @updatedAt @db.DateTime(0)
  createdAt  DateTime     @default(now()) @db.DateTime(0)
  email      String
  name       String
  department Department
  status     VendorStatus
  orders     Job[]

  @@map("vendors")
}

model GmailMsg {
  threadId   String         @map("thread_id") @db.VarChar(16)
  inboxMsgId String         @map("inbox_msg_id") @db.VarChar(16)
  jobId      String         @map("job_id") @db.VarChar(32)
  direction  EmailDirection
  job        Job            @relation(fields: [jobId], references: [id], onDelete: Cascade, map: "gmail_msgs_job_primary")

  @@id([threadId, inboxMsgId, jobId])
  @@index([jobId], map: "gmail_msgs_job_primary")
  @@map("gmail_msgs")
}

model Job {
  id            String        @id @db.VarChar(32)
  name          String        @db.VarChar(100)
  price         Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now()) @db.DateTime(0)
  updatedAt     DateTime      @updatedAt @db.DateTime(0)
  type          JobType
  status        JobStatus
  vendorId      Int           @map("vendor_id")
  jobId         Int           @map("job_id")
  GmailMsgs     GmailMsg[]
  purchaseOrder PurchaseOrder @relation(fields: [jobId], references: [id], onDelete: Cascade, map: "job_purchase_order")
  vendor        Vendor        @relation(fields: [vendorId], references: [id])

  @@index([jobId], map: "job_purchase_order")
  @@map("jobs")
}

model PurchaseOrder {
  id       Int    @id @default(autoincrement())
  clientId String @map("client_id") @db.VarChar(32)
  jobs     Job[]
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "purchase_order_client")

  @@index([clientId], map: "purchase_order_client")
  @@map("purchase_orders")
}

model SalesRep {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(100)
  email     String @db.VarChar(100)
  phone     String @db.VarChar(100)
  companyId Int    @map("company_id")

  company Company  @relation(fields: [companyId], references: [id])
  Client  Client[]
}

model ClientAddress {
  id        Int      @id @default(autoincrement())
  address   String   @db.VarChar(100)
  city      String   @db.VarChar(100)
  state     String   @db.VarChar(2)
  country   String   @db.VarChar(100)
  zip       String   @db.VarChar(16)
  clientId  String   @map("client_id") @db.VarChar(32)
  updatedAt DateTime @updatedAt @db.DateTime(0)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "client_addresses_FK")

  @@index([clientId], map: "client_addresses_FK")
  @@map("client_addresses")
}

model ClientEmail {
  email       String    @db.VarChar(100)
  clientId    String    @map("client_id") @db.VarChar(32)
  description String?   @db.VarChar(100)
  type        EmailType
  updatedAt   DateTime  @updatedAt @db.DateTime(0)
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "client_email_FK")

  @@id([email, clientId])
  @@index([clientId], map: "client_email_FK")
  @@map("client_emails")
}

model ClientPhone {
  phone       String    @db.VarChar(100)
  clientId    String    @map("client_id") @db.VarChar(32)
  description String?   @db.VarChar(100)
  updatedAt   DateTime  @updatedAt @db.DateTime(0)
  type        PhoneType
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "client_phone_FK")

  @@id([phone, clientId])
  @@index([clientId], map: "client_phone_FK")
  @@map("client_phones")
}

model Company {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(100)
  address  String     @db.VarChar(100)
  city     String     @db.VarChar(100)
  state    String     @db.VarChar(2)
  country  String     @db.VarChar(100)
  zip      String     @db.VarChar(16)
  phone    String     @db.VarChar(100)
  email    String     @db.VarChar(100)
  website  String     @db.VarChar(100)
  SalesRep SalesRep[]

  @@map("companies")
}

enum JobType {
  JOB
  REVISION
  QUOTE
  CREDIT
}

enum JobStatus {
  PENDING
  RUSH
  COMPLETED
  CANCELLED
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  RETIRED
}

enum VendorStatus {
  ACTIVE
  INACTIVE
}

enum EmailType {
  JOB
  INVOICE
}

enum PhoneType {
  PRIMARY
  SECONDARY
}

enum Currency {
  USD
  CAD
}

enum Department {
  DIGITIZING
  VECTOR
  PATCH
}

enum PayMethod {
  CHECK
  PAYPAL
  CREDIT_CARD
  ONLINE
  UNKNOWN
}

enum EmailDirection {
  BACKWARD
  FORWARD
}
