generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model fa_pass {
  id       Int    @id @default(autoincrement())
  password String @db.Text

  @@map("2fa_pass")
}

model authentication {
  id         Int    @id @default(autoincrement())
  ip_address String @db.VarChar(20)
}

model call_log {
  clientid Int
  datetime DateTime @db.DateTime(0)
  duration String   @db.VarChar(10)
  client   client   @relation(fields: [clientid], references: [id], onDelete: Cascade, map: "fk_call_log_client")

  @@id([clientid, datetime])
}

model client {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(255)
  phone         String     @db.VarChar(255)
  email         String     @default("Not available") @db.VarChar(255)
  address       String     @default("Not available") @db.VarChar(255)
  employeeid    Int
  companyid     Int
  istcrequired  Int        @default(1) @db.TinyInt
  isflatrate    Int        @default(1) @db.TinyInt
  pptprice      Decimal?   @db.Decimal(10, 2)
  paym          String     @default("tc") @db.VarChar(45)
  date_added    DateTime?  @default(now()) @db.DateTime(0)
  order_notes   String?    @db.VarChar(100)
  emergencymode Int        @default(0) @db.TinyInt
  call_log      call_log[]
  company       company    @relation(fields: [companyid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_client_company")
  employee      employee   @relation(fields: [employeeid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_client_employee")
  design        design[]
  invoice       invoice[]

  @@index([companyid], map: "companyid")
  @@index([employeeid], map: "employeeid")
}

model company {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  email         String?         @db.VarChar(25)
  website       String?         @db.VarChar(35)
  paym_link     String?         @db.VarChar(25)
  address       String          @db.VarChar(60)
  client        client[]
  gmail_threads gmail_threads[]
  revenue       revenue[]
}

model content {
  id         Int      @id @default(autoincrement())
  content    String   @db.MediumText
  page       Int      @default(1) @db.TinyInt
  employeeid Int
  date       DateTime @default(now()) @db.DateTime(0)
  employee   employee @relation(fields: [employeeid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_content")

  @@index([employeeid], map: "fk_employee_content")
}

model department {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(100)
  employee employee[]
  vendor   vendor[]
}

model design {
  id            Int             @id @default(autoincrement())
  serial        Int?
  name          String          @db.VarChar(275)
  price         Decimal         @db.Decimal(10, 2)
  pct_paid      Int             @default(0)
  clientid      Int
  vendorid      Int
  status        Int             @default(0) @db.TinyInt
  ssc           Int             @default(0) @db.TinyInt
  rush          Int             @default(0) @db.TinyInt
  date          DateTime?       @db.DateTime(0)
  approved_by   Int?
  notes         String?         @db.VarChar(512)
  fwd_threadid  String?         @db.VarChar(100)
  bwd_threadid  String?         @db.VarChar(100)
  bwd_msgid     String?         @db.VarChar(100)
  fwd_sent      Int             @default(-1) @db.TinyInt
  bwd_sent      Int             @default(-1) @db.TinyInt
  fwd_time      DateTime?       @db.DateTime(0)
  bwd_time      DateTime?       @db.DateTime(0)
  client        client          @relation(fields: [clientid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_design_client")
  vendor        vendor          @relation(fields: [vendorid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_design_vendor")
  gmail_threads gmail_threads[]
  revision      revision[]

  @@index([bwd_threadid], map: "bwd_threadid")
  @@index([clientid], map: "clientid")
  @@index([date], map: "design_idx_date")
  @@index([approved_by], map: "fk_design_employee")
  @@index([fwd_threadid], map: "fwd_msgid")
  @@index([serial], map: "serial")
  @@index([vendorid], map: "vendorid")
}

model email_log {
  clientid Int
  datetime DateTime @db.DateTime(0)
  subject  String?  @db.VarChar(100)

  @@id([clientid, datetime])
}

model email_template {
  id                   Int              @id @default(autoincrement())
  title                String           @db.VarChar(256)
  content              String           @db.MediumText
  employeeid           Int
  parent_id            Int?
  rank                 Int?
  email_template       email_template?  @relation("email_templateToemail_template", fields: [parent_id], references: [id], onDelete: Cascade, map: "fk_email_template_email_template")
  other_email_template email_template[] @relation("email_templateToemail_template")

  @@index([employeeid], map: "employeeid")
  @@index([parent_id], map: "parent_id")
}

model employee {
  id             Int         @id @default(autoincrement())
  name           String?     @db.VarChar(255)
  username       String      @db.VarChar(8)
  avatar         String?     @db.TinyText
  accent_color   String?     @db.VarChar(10)
  second_color   String?     @db.VarChar(10)
  basic          Decimal?    @db.Decimal(10, 2)
  mentor         Int?
  deptid         Int?
  client         client[]
  content        content[]
  employee       employee?   @relation("employeeToemployee", fields: [mentor], references: [id], onDelete: Cascade, map: "fk_employee")
  other_employee employee[]  @relation("employeeToemployee")
  department     department? @relation(fields: [deptid], references: [id], map: "fk_employee_department")
  goal           goal[]
  payslip        payslip[]
  script         script[]

  @@index([deptid], map: "deptid")
  @@index([mentor], map: "mentor")
}

model follow_up {
  id           Int       @id @default(autoincrement())
  email        String?   @db.VarChar(60)
  frequency    Int       @default(0)
  last_emailed DateTime? @default(now()) @db.DateTime(0)
  last_called  DateTime? @db.DateTime(0)
  is_active    Boolean   @default(true)
}

model gmail_msgs {
  id            String        @id @db.VarChar(64)
  date          DateTime?     @db.DateTime(0)
  threadid      String        @db.VarChar(64)
  gmail_threads gmail_threads @relation(fields: [threadid], references: [id], onDelete: Cascade, map: "fk_msgs_threads")

  @@index([threadid], map: "threadid")
}

model gmail_threads {
  id           String       @id @db.VarChar(64)
  is_processed Int          @default(0) @db.TinyInt
  companyid    Int
  email_match  Int?
  doc_match    String?      @db.VarChar(30)
  gmail_msgs   gmail_msgs[]
  company      company      @relation(fields: [companyid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_threads_company")
  design       design?      @relation(fields: [email_match], references: [id], onDelete: Cascade, map: "fk_threads_design")

  @@index([companyid], map: "fk_threads_company")
  @@index([email_match], map: "fk_threads_design")
  @@index([is_processed], map: "is_processed")
}

model goal {
  id               Int       @id @default(autoincrement())
  employeeid       Int
  designcount      Int?
  clientcount      Int?
  invoicethreshold Decimal?  @db.Decimal(10, 2)
  call_minutes     Int?      @default(600)
  reward           Decimal?  @default(0.00) @db.Decimal(10, 2)
  percent_complete Int       @default(0)
  approved         Int       @default(0) @db.TinyInt
  date             DateTime? @db.Date
  employee         employee  @relation(fields: [employeeid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_goal_employee")

  @@index([employeeid], map: "employeeid")
}

model invoice {
  id                 Int         @id @default(autoincrement())
  clientid           Int
  date               DateTime    @db.Date
  amount             Decimal     @db.Decimal(10, 2)
  awss               Decimal     @default(1.00) @db.Decimal(10, 2)
  status             Int         @default(0) @db.TinyInt
  emailed            Int         @default(0) @db.TinyInt
  thanked            Int         @default(0) @db.TinyInt
  last_emailed       DateTime?   @db.DateTime(0)
  thread_id          String?     @db.VarChar(64)
  commission_paid_on DateTime?   @db.Date
  client             client      @relation(fields: [clientid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_client")
  paypal_ipn         paypal_ipn?

  @@index([clientid], map: "clientid")
}

model logs {
  id           Int      @id @default(autoincrement())
  last_updated DateTime @default(now()) @db.DateTime(0)
  table_name   String   @db.VarChar(16)

  @@index([table_name], map: "table_name")
}

model paym {
  id   String  @id @db.VarChar(2)
  name String  @db.VarChar(17)
  tc   Decimal @db.Decimal(10, 2)
}

model paypal_ipn {
  id        String    @id @db.VarChar(32)
  invoiceid Int?      @unique(map: "invoiceid")
  amount    Decimal   @db.Decimal(10, 2)
  email     String    @db.VarChar(32)
  payload   String    @db.VarChar(2000)
  date      DateTime? @default(now()) @db.DateTime(0)
  invoice   invoice?  @relation(fields: [invoiceid], references: [id], onDelete: Cascade, map: "fk_paypal_ipn_invoice")
}

model payslip {
  id           Int       @id @default(autoincrement())
  date         DateTime? @db.Date
  leaves       Int
  employeeid   Int
  incentives   Decimal   @db.Decimal(10, 2)
  commission   Decimal   @db.Decimal(10, 2)
  salary       Decimal   @db.Decimal(10, 2)
  call_minutes Int?
  employee     employee  @relation(fields: [employeeid], references: [id], onUpdate: Restrict, map: "fk_payslip_employee")

  @@index([employeeid], map: "employeeid")
}

model processed_email {
  id             String   @id @db.VarChar(80)
  date_processed DateTime @default(now()) @db.DateTime(0)
  matched        Int      @db.TinyInt
  email_match    String   @db.VarChar(30)
  doc_match      String?  @db.VarChar(30)
}

model revenue {
  id        Int      @id @default(autoincrement())
  companyid Int
  revenue   Decimal  @db.Decimal(10, 2)
  date      DateTime @db.Date
  company   company  @relation(fields: [companyid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_revenue_company")

  @@index([companyid], map: "companyid")
}

model revision {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(100)
  date        DateTime @db.DateTime(0)
  status      Int      @default(0) @db.TinyInt
  designid    Int
  notes       String?  @db.VarChar(512)
  fwd_msgid   String?  @db.VarChar(100)
  design      design   @relation(fields: [designid], references: [id], onDelete: Cascade, map: "fk_design_revision")

  @@index([designid], map: "fk_design_revision")
}

model scheduled_email {
  id            Int    @unique(map: "UNIQUE") @default(autoincrement())
  frequency     Int
  time_interval String @default("d") @db.Char(1)
  weekday       String @db.VarChar(10)
  part_of_day   String @default("m") @db.Char(1)
  email         Int
  clientid      Int
  templateid    Int
  employeeid    Int

  @@id([frequency, time_interval, weekday, part_of_day, clientid, templateid, employeeid])
  @@index([clientid, templateid, employeeid], map: "scheduled_email_index")
}

model script {
  id         Int      @id @default(autoincrement())
  title      String?  @db.VarChar(60)
  content    String?  @db.MediumText
  employeeid Int
  date       DateTime @default(now()) @db.DateTime(0)
  employee   employee @relation(fields: [employeeid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_script_employee")

  @@index([employeeid], map: "fk_script_employee")
}

model usd_rate {
  id    Int     @id @default(autoincrement())
  rate  Decimal @db.Decimal(10, 2)
  month String  @unique(map: "month") @db.VarChar(6)
}

model users {
  id           Int     @id @default(autoincrement()) @db.UnsignedInt
  email        String  @unique(map: "email") @db.VarChar(249)
  password     String  @db.VarChar(255)
  username     String? @db.VarChar(100)
  status       Int     @default(0) @db.UnsignedTinyInt
  verified     Int     @default(0) @db.UnsignedTinyInt
  resettable   Int     @default(1) @db.UnsignedTinyInt
  roles_mask   Int     @default(0) @db.UnsignedInt
  registered   Int     @db.UnsignedInt
  last_login   Int?    @db.UnsignedInt
  force_logout Int     @default(0) @db.UnsignedMediumInt
}

model users_confirmations {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id  Int    @db.UnsignedInt
  email    String @db.VarChar(249)
  selector String @unique(map: "selector") @db.VarChar(16)
  token    String @db.VarChar(255)
  expires  Int    @db.UnsignedInt

  @@index([email, expires], map: "email_expires")
  @@index([user_id], map: "user_id")
}

model users_remembered {
  id       BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  user     Int    @db.UnsignedInt
  selector String @unique(map: "selector") @db.VarChar(24)
  token    String @db.VarChar(255)
  expires  Int    @db.UnsignedInt

  @@index([user], map: "user")
}

model users_resets {
  id       BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  user     Int    @db.UnsignedInt
  selector String @unique(map: "selector") @db.VarChar(20)
  token    String @db.VarChar(255)
  expires  Int    @db.UnsignedInt

  @@index([user, expires], map: "user_expires")
}

model users_throttling {
  bucket         String @id @db.VarChar(44)
  tokens         Float  @db.Float
  replenished_at Int    @db.UnsignedInt
  expires_at     Int    @db.UnsignedInt

  @@index([expires_at], map: "expires_at")
}

model vendor {
  id           Int        @id @default(autoincrement())
  name         String?    @db.VarChar(255)
  email        String?    @db.VarChar(50)
  deptid       Int
  max_capacity Int
  design       design[]
  department   department @relation(fields: [deptid], references: [id], onUpdate: Restrict, map: "fk_vendor_department")

  @@index([deptid], map: "fk_vendor_department")
}
