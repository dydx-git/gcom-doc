generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  writeNullishInModelTypes         = true
  createOptionalDefaultValuesTypes = true
  createRelationValuesTypes        = true
  output                           = "../src/lib/zod-prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  /// @zod.string.min(1).max(32)
  id                    String                  @id @db.VarChar(32)
  /// @zod.string.min(1).max(60)
  name                  String                  @db.VarChar(100)
  /// @zod.string.min(1).max(100)
  companyName           String                  @map("company_name") @db.VarChar(100)
  createdAt             DateTime                @default(now()) @db.DateTime(0)
  addTransactionCharges Boolean                 @map("add_tc")
  updatedAt             DateTime                @updatedAt @db.DateTime(0)
  payMethod             PayMethod               @map("pay_method")
  /// @zod.enum
  currency              Currency
  status                ClientStatus
  notes                 String?
  /// @zod.custom.use(z.string().min(2).max(20).refine((v) => validator.isAlphanumeric(v), { message: 'Username can only contain alphanumeric characters' }))
  salesRepUsername      String                  @map("sales_rep_username") @db.VarChar(100)
  /// @zod.custom.use(z.coerce.number().gte(1, { message: 'Please select a valid company' }))
  companyId             Int                     @map("company_id")
  emails                ClientEmail[]
  phones                ClientPhone[]
  orders                PurchaseOrder[]
  clientSalesRepCompany ClientSalesRepCompany[]
  salesRep              SalesRep                @relation(fields: [salesRepUsername], references: [username], map: "client_sales_rep")
  company               Company                 @relation(fields: [companyId], references: [id], map: "client_company")
  clientAddress         ClientAddress?
  ClientSetPrice        ClientSetPrice[]

  @@map("clients")
}

model Vendor {
  id         Int          @id @default(autoincrement())
  updatedAt  DateTime     @updatedAt @db.DateTime(0)
  createdAt  DateTime     @default(now()) @db.DateTime(0)
  email      String
  name       String
  department Department
  status     VendorStatus
  orders     Job[]

  @@map("vendors")
}

model GmailMsg {
  threadId   String         @map("thread_id") @db.VarChar(16)
  inboxMsgId String         @map("inbox_msg_id") @db.VarChar(16)
  rfcId      String         @map("rfc_id") @db.VarChar(32)
  jobId      String         @map("job_id") @db.VarChar(32)
  direction  EmailDirection
  job        Job            @relation(fields: [jobId], references: [id], onDelete: Cascade, map: "gmail_msgs_job_primary")

  @@id([threadId, inboxMsgId, jobId])
  @@index([jobId], map: "gmail_msgs_job_primary")
  @@map("gmail_msgs")
}

model EmailStatus {
  id      Int             @id @default(autoincrement())
  msgId   String?         @map("msg_id") @db.VarChar(16)
  to      String          @db.VarChar(100)
  subject String          @db.VarChar(400)
  date    DateTime        @db.DateTime(0)
  status  EmailStatusType

  @@map("email_status")
}

model Job {
  id              String         @id @db.VarChar(32)
  name            String         @db.VarChar(100)
  price           Decimal        @db.Decimal(10, 2)
  createdAt       DateTime       @default(now()) @db.DateTime(0)
  updatedAt       DateTime       @updatedAt @db.DateTime(0)
  type            JobType
  status          JobStatus
  vendorId        Int            @map("vendor_id")
  purchaseOrderId Int            @map("po_id")
  GmailMsgs       GmailMsg[]
  purchaseOrder   PurchaseOrder  @relation(name: "PurchaseOrder", fields: [purchaseOrderId], references: [id], onDelete: Cascade, map: "job_purchase_order")
  vendor          Vendor         @relation(fields: [vendorId], references: [id])
  PurchaseOrder   PurchaseOrder?

  @@index([purchaseOrderId], map: "job_purchase_order")
  @@map("jobs")
}

model PurchaseOrder {
  id           Int     @id @default(autoincrement())
  clientId     String  @map("client_id") @db.VarChar(32)
  primaryJobId String? @unique @map("primary_job_id") @db.VarChar(32)
  jobs         Job[]   @relation(name: "PurchaseOrder")
  client       Client  @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "purchase_order_client")
  primaryJob   Job?    @relation(fields: [primaryJobId], references: [id], map: "primary_job")

  @@index([clientId], map: "purchase_order_client")
  @@map("purchase_orders")
}

model SalesRep {
  id        Int    @id @default(autoincrement())
  /// @zod.custom.use(z.string().min(2).max(10).refine((v) => validator.isAlphanumeric(v), { message: 'Username can only contain alphanumeric characters' }))
  username  String @unique @map("user_name") @db.VarChar(100)
  name      String @db.VarChar(100)
  /// @zod.custom.use(z.string().refine((v) => validator.isEmail(v), { message: 'Invalid email' }))
  email     String @db.VarChar(100)
  /// @zod.custom.use(z.string().min(6).max(18).refine((v) => validator.isMobilePhone(v), { message: 'Must be a valid phone number' }))
  phone     String @db.VarChar(100)
  /// @zod.custom.use(z.coerce.number().gte(1, { message: 'Please select a valid company' }))
  companyId Int    @map("company_id")

  company               Company                 @relation(fields: [companyId], references: [id])
  user                  User                    @relation(fields: [username], references: [username], map: "sales_rep_user")
  clientSalesRepCompany ClientSalesRepCompany[]
  client                Client[]
  ColorSettings         ColorSettings[]

  @@map("sales_reps")
}

model ColorSettings {
  /// @zod.custom.use(z.string().min(2).max(2).refine((v) => validator.isAlphanumeric(v), { message: 'Username can only contain alphanumeric characters' }))
  salesRepUsername String   @map("sales_rep_username") @db.VarChar(100)
  /// @zod.custom.use(z.string().min(4).max(8).refine((v) => validator.isHexColor(v), { message: 'Must be a valid hex color' }))
  accentColor      String   @db.VarChar(8)
  /// @zod.custom.use(z.string().min(4).max(8).refine((v) => validator.isHexColor(v), { message: 'Must be a valid hex color' }))
  primaryColor     String   @db.VarChar(8)
  /// @zod.custom.use(z.string().min(4).max(8).refine((v) => validator.isHexColor(v), { message: 'Must be a valid hex color' }))
  secondaryColor   String   @db.VarChar(8)
  /// @zod.custom.use(z.string().min(4).max(8).refine((v) => validator.isHexColor(v), { message: 'Must be a valid hex color' }))
  auxiliaryColor   String   @db.VarChar(8)
  /// z.string().optional()
  theme            Theme    @default(white)
  salesRep         SalesRep @relation(fields: [salesRepUsername], references: [username], onDelete: Cascade, map: "sales_rep_colors_sales_rep")

  @@id([salesRepUsername])
  @@map("color_settings")
}

model UserSettings {
  username String @id
  settings Json   @db.Json
  User     User   @relation(fields: [username], references: [id])

  @@map("user_settings")
}

model ClientSalesRepCompany {
  clientId         String    @map("client_id") @db.VarChar(32)
  salesRepUsername String    @map("sales_rep_username") @db.VarChar(100)
  /// @zod.custom.use(z.coerce.number().gte(1, { message: 'Please select a valid company' }))
  companyId        Int       @map("company_id")
  fromDate         DateTime  @default(now()) @db.DateTime(0)
  toDate           DateTime? @db.DateTime(0)
  isActive         Boolean   @default(true)
  client           Client    @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "client_sales_rep_client")
  salesRep         SalesRep  @relation(fields: [salesRepUsername], references: [username], onDelete: Cascade, map: "client_sales_rep_sales_rep")
  company          Company   @relation(fields: [companyId], references: [id], onDelete: Cascade, map: "client_sales_rep_company")

  @@id([clientId, salesRepUsername])
  @@index([salesRepUsername, fromDate(sort: Desc), toDate(sort: Desc)], map: "client_sales_rep_sales_rep_index")
  @@map("client_sales_reps")
}

model ClientSetPrice {
  clientId String    @map("client_id") @db.VarChar(32)
  price    Decimal   @db.Decimal(10, 2)
  type     PriceType

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "client_set_price_client")

  @@id([clientId, type])
  @@map("client_set_prices")
}

model ClientAddress {
  clientId  String   @id @map("client_id") @db.VarChar(32)
  /// @zod.string.min(1).max(100)
  address   String   @db.VarChar(100)
  /// @zod.custom.use(z.string().min(2).max(2).refine((v) => validator.isAlpha(v), { message: 'Invalid state' }))
  state     String   @db.VarChar(2)
  /// @zod.string.min(1).max(100)
  city      String   @db.VarChar(100)
  /// @zod.custom.use(z.string().min(2).max(3).refine((v) => validator.isAlpha(v), { message: 'Invalid country code' }))
  country   String   @db.VarChar(10)
  /// @zod.custom.use(z.string().refine((v) => validator.isPostalCode(v, 'US'), { message: 'Invalid zip' }))
  zip       String   @db.VarChar(16)
  updatedAt DateTime @updatedAt @db.DateTime(0)
  Client    Client?  @relation(fields: [clientId], references: [id])

  @@index([clientId], map: "client_addresses_FK")
  @@map("client_addresses")
}

/// @zod.import(["import validator from 'validator';"])
model ClientEmail {
  /// @zod.custom.use(z.string().refine((v) => validator.isEmail(v), { message: 'Invalid email' }))
  email       String    @db.VarChar(100)
  clientId    String    @map("client_id") @db.VarChar(32)
  description String?   @db.VarChar(100)
  type        EmailType
  updatedAt   DateTime  @updatedAt @db.DateTime(0)
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "client_email_FK")

  @@id([email, clientId])
  @@index([clientId], map: "client_email_FK")
  @@map("client_emails")
}

model ClientPhone {
  /// @zod.custom.use(z.string().min(6).max(18).refine((v) => validator.isMobilePhone(v), { message: 'Must be a valid phone number' }))
  phone       String    @db.VarChar(100)
  clientId    String    @map("client_id") @db.VarChar(32)
  description String?   @db.VarChar(100)
  updatedAt   DateTime  @updatedAt @db.DateTime(0)
  type        PhoneType
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "client_phone_FK")

  @@id([phone, clientId])
  @@index([clientId], map: "client_phone_FK")
  @@map("client_phones")
}

model Company {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  address               String                  @db.VarChar(100)
  city                  String                  @db.VarChar(100)
  state                 String                  @db.VarChar(2)
  country               String                  @db.VarChar(100)
  zip                   String                  @db.VarChar(16)
  phone                 String                  @db.VarChar(100)
  email                 String                  @db.VarChar(100)
  website               String                  @db.VarChar(100)
  SalesRep              SalesRep[]
  ClientSalesRepCompany ClientSalesRepCompany[]
  Client                Client[]

  @@map("companies")
}

model User {
  id           String         @id @unique
  username     String         @unique
  role         UserRoles
  session      Session[]
  Key          Key[]
  SalesRep     SalesRep?
  UserSettings UserSettings[]

  @@map("user")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  expires         BigInt?
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

enum PriceType {
  LEFTCHEST
  FULLBACK
  VECTOR
}

enum JobType {
  JOB
  REVISION
  QUOTE
  CREDIT
}

enum JobStatus {
  PENDING
  RUSH
  COMPLETED
  CANCELLED
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  RETIRED
}

enum VendorStatus {
  ACTIVE
  INACTIVE
}

enum EmailType {
  JOB
  INVOICE
}

enum PhoneType {
  PRIMARY
  SECONDARY
}

enum Currency {
  USD
  CAD
}

enum Department {
  DIGITIZING
  VECTOR
  PATCH
}

enum PayMethod {
  CHECK
  PAYPAL
  CREDIT_CARD
  ONLINE
  UNKNOWN
}

enum EmailDirection {
  BACKWARD
  FORWARD
}

enum UserRoles {
  ADMIN
  USER
  MANAGER
}

enum Theme {
  white
  g10
  g80
  g90
  g100
}

enum EmailStatusType {
  PENDING
  SENT
  FAILED
}
